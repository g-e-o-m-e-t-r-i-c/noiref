typedef pair<int,int> ii;
priority_queue <ii,vector<ii>,greater<ii> > pq;
void dijkstra(int source){
	for(int x=0;x<N;x++) dist[x]=300000000;
	dist[source]=0;
	pq.push(ii(0,source));
	while(!pq.empty()){
		ii front=pq.top(); //pick closest node
		pq.pop();
		int v=front.second;
		if(visited[v]) continue;
		visited[v]=1;
		for(vector<ii>::iterator i=adjlist[v].begin();i<adjlist[v].end();i++){
			if(dist[i->first]>dist[v]+i->second){
				dist[i->first]=dist[v]+i->second];//relax edge
				pq.push(ii(dist[i->first],i->first));
				previous_node[i->first]=v;//save path
			}
		}
	}
}

void floyd_warshall(){
	for(int i=0;i<N;i++){
		for(int j=0;j<N;j++){
			dist[i][j]=adjmat[i][j];
		}
	}
	for(int k=0;k<N;k++){
		for(int i=0;i<N;i++){
			for(int j=0;j<N;j++){
				if(dist[i][j]>dist[i][k]+dist[k][j]){
					dist[i][j]=dist[i][k]+dist[k][j];
				}
			}
		}
	}
}
