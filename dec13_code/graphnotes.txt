1. Graph Characteristics (Collection of nodes and edges)
	- (Un)Directed
	- (Un)Weighted
	- (A)Cyclic
	- Tree
		- Connected, Undirected and Acyclic
		- Exactly one path between two distinct nodes
		- N nodes with N-1 edges
	- Bipartite (In IOI Syllabus)
		- Nodes can be split into 2 distinct sets with no edges within each set
		- Maximum Cardinality Bipartite Matching (Not in IOI Syllabus)
		
2. Depth/Breadth First Search ((D/B)FS)
	- Depth First Search (deeper first)
		- Go down until cannot anymore then go up/left/right
		- 
		
		
	- Breadth First Search (neighbours first)
		- Visit neighbouring nodes first
		- Solve shortest path on UNWEIGHTED graphs
	
3. Topological Sort
	- Use a Depth First Search
	
4. Single Source Shortest Path (SSSP)
	- Unweighted
		- Breadth First Search
	- Weighted and all edges have non-negative weight
		- Dijkstra Algorithm (~O(E log V))
			- Greedily pick the node of shortest distance to source 
			  that has not been relaxed and relax the node
			- Uses a Priority Queue
			- Relaxing : 'Update' neighbours if has shorter path
			
		- Bellman Ford: O(VE)
			- Loop V times: 
				- Relax each node once 
		
		- Shortest Path Faster Algorithm (Worst case O(VE), best case O(E))
			- Only relax vertices that are 'updated'
			- Can be used with negative cycles
				- But need keep track of the number of times a vertice is
					relaxed. If (relaxed > V) -> negative cycle exist
					then BREAK.
			- Pseudocode:
				- Relax source
					- Push all neighbours that are relaxed into NORMAL queue
				- Relax next in queue
					- Push all neighbours that are relaxed into NORMAL queue
				- Relax next in queue .. until end

5. All Pairs Shortest Path (APSP)
	- Unweighted
		- Run Breadth First Search on all nodes (~O(V^2))
	- Weighted with non-negative edge weights
		- Run V dijkstra (~O(VE log V))
		- Floyd-Warshall (O(V^3))
		
6. Minimum/Maximum Spanning Tree (MST)
	- Only on undirected weighted graph
	- Build edges to connect everything with minimum/maximum cost
	such that the resultant is a TREEE (V-1 edges)
		- Only 1 unique path between all pairs of vertices (no cycle)
	- Kruskal (O(E log E))
		- Sort all edges by weight/cost -> STL sort
		- Try to insert edges one by one until V-1 edges added (TREE)
		- For each edge: Eg. A -> B
			- if A and B has same parent, don't insert
			- if different, insert and merge their group
		- Use UFDS to check for cycles
		
	- Prim (No need to know)
		- Modified dijkstra, use max(edgeweightsofar) 
		  instead of sum(edgedist)
	

7. Tree Algorithms
	- DEFINING PROPERTIES OF TREE
		- ONE UNIQUE PATH between every pair of vertices
		- E = V-1 and ALL connected (and bidirectional is not necessary)
		- Each 'child' has only one 'parent'
		
	- Diameter (O(V))
		imagine: A - B - C - D - E - F - G
					  \- H - I - J
		Diameter is 9 (J to G)
		- Run Depth First Search to furthest node
		- Run Depth First Search to furthest node from that node
	- Centre (O(V))
		imagine: A - B - C - D - E - F - G
					  \- H - I - J
		Diameter is 9 (J to G)
		- Run Depth First Search to furthest node
		- Run Depth First Search to furthest node from that node
			- AKA find the 2 'ends' of the diameter
		- Search path between those nodes for centre
			- SSSP from the 2 'ends'
			- diameter is the node with min(max(distfromA[x], distfromB[x]))
			for all vertice x 
			
	- SSSP on Tree
		- Run Breadth First Search from source (O(V))
		- Only unique path, keep track 'dist travelled so far'
		- Don't need dijkstra.
		
	- APSP on Tree
		- Run Breadth First Search from every vertex (O(V^2))
			- Repeat SSSP on every start vertex

		- Lowest Common Ancestor (O(V log V)+O(log V) per query)
			- Heavy Light Decomposition
			- Segment Tree

	
				
	
	

