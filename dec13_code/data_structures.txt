Data Structures:
1) Vector
#include <vector>
using namespace std;
vector <data_type> v;
vector <data_type>::iterator i;
Assign: v.assign(N,0) (O(N))
Add: v.push_back(data) (O(1))
Access: v[0],v[1],v[2]... (O(1))
Size: v.size() (O(1))
Pointers: v.begin(),v.end(),v.begin()+k
Iterator: i++,i--,(*i) (all O(1))
Loop: for(i=v.begin();i!=v.end();i++)
Sort: sort(v.begin(),v.end());

Adjacency List
#define N 1000005
vector <int> adj[N];//adj[x] stores edges from x
for(int x=0;x<edges;x++){
	scanf("%d %d",&p1,&p2);
	adj[p1].push_back(p2);//edge from p1 to p2
	adj[p2].push_back(p1);//edge from p2 to p1
}

Adjacency Matrix
#define N 1005
int adj[N][N];
memset(adj,0,sizeof(adj)); (in <cstring>)
for(int x=0;x<edges;x++){
	scanf("%d %d",&p1,&p2);
	adj[p1][p2]=adj[p2][p1]=1;
}


2) Union Find Disjoint Set
Data structure to save connected components
Check whether two points are connected in ~O(1)
int find_parent(int k){ (~O(1))
	if(parent[k]==k) return k;//leader
	return parent[k]=find_parent(parent[k]);//optimised
}
void union(int p, int q){ (~O(1))
	int p1=find_parent(p);
	int q1=find_parent(q);
	if(p1==q1) return;
	num_of_groups--;
	if(size[p1]<=size[q1]){ //union by rank
		parent[p1]=q1;
		size[q1]+=size[p1];
	}
	else(size[p1]>size[q1]){ //also allows you to find size of each group in O(1) by leader
		parent[q1]=p1;
		size[p1]+=size[q1];
	}
}
void find_size(int k){ (~O(1))
	return size[find_parent(k)];
}
for(int x=0;x<N;x++){//initialise
	parent[x]=x;
	size[x]=1;
	num_of_groups=N;
}
	
3) Queue

#include <queue>
using namespace std;
queue <data_type> q;
Add: q.push(data) (O(1)) //push into back
Remove: q.pop() (O(1)) //take from front
Remove ALL: q.clear() (O(N))
Access: q.front(),q.back() (O(1)) //cannot access middle elements directly
Size: q.size() (O(1))

4) Stack

#include <stack>
using namespace std;
stack <data_type> s;
Add: s.push(data) (O(1)) //push into top
Remove: s.pop() (O(1)) //take from top
Access: s.top() (O(1)) //cannot access middle elements directly
Size: s.size() (O(1))

5) Deque (double-ended queue) which makes the previous 2 redundant

#include <deque>
using namespace std;
deque <data_type> dq;
deque <data_type>::iterator i;
Add: dq.push_back(data), dq.push_front(data) (O(1))
Remove: dq.pop_back(), dq.pop_front() (O(1))
Access: dq[0],dq[1],dq[2],... (O(1)) :O
Size: dq.size() (O(1))
Pointers: dq.begin(),dq.end(),dq.begin()+k
Iterator: i++,i--,(*i) (all O(1))
Loop: for(i=dq.begin();i!=dq.end();i++)
Sort: sort(dq.begin(),dq.end());
//YAY now you don't need stack and queue and vector
//UNLESS people decide to be evil and limit your memory

6) Linked List
#include <list>
using namespace std;
list <data_type> l;
list <data_type>::iterator i;
Add: l.push_back(data),l.push_front(data) (O(1))
Remove: l.pop_back(),l.pop_front() (O(1))
Insert: l.insert(iterator, data) (O(1))
Erase: l.erase(iterator) (O(1))
Size: s.size()
Pointers: l.begin(),l.end()
Iterator: i++,i--,(*i) (all O(1))
Loop: for(i=l.begin();i!=l.end();i++)
Sort: l.sort() (O(N log N))

7) (Multi)Set
#include <set>
using namespace std;
set <data_type> s;
set <data_type>::iterator i;
Insert: s.insert(data) (O(log N))
Erase: s.erase(iterator) (~O(1)) OR s.erase(data) (~O(log N))
Remove ALL: s.clear()
Binary Search: s.lower_bound(s.begin(),s.end(),data), s.upper_bound(s.begin(),s.end(),data) (O(log N))
Sort: NO NEED :D
Size: s.size() (O(1))
Pointers: s.begin(),s.end()
Iterator: i++,i-- (all O(log N)) and (*i) (O(1))
Loop: for(i=s.begin();i!=s.end();i++) (O(N log N))
//NOTE IT DOES NOT ALLOW REPEATED ELEMENTS!!!
//IF REPEATED ELEMENTS NEEDED REPLACE ALL "set" WITH "multiset"

8) Pair
pair<data_type_1,data_type_2> p,q;
p.first,p.second; (NO BRACKETS BTW)
p<q,p==q,p>q are defined => sort by first value then second value
//NOTE DON'T DO THIS vector <pair<int,int>> v; IT WILL FAIL!!
//DO THIS vector <pair<int,int> > v;

typedef pair<int,int> ii;
typedef pair<ii,ii> iiii;
typedef long long ll;
//YAY all pair<int,int> can be replaced by ii
ii p;
vector <ii> v;
p=ii(0,0); OR p=make_pair(0,0);

9) (Multi)Map
#include <map>
using namespace std;
map <data_type_key,data_type_data> m;
map <data_type_key,data_type_data>::iterator i;
Insert: m[key] = data (O(log N))
Erase: m.erase(key) (O(log N))
Remove ALL: m.clear()
Access: m[key] (O(log N))
Binary Search: m.lower_bound(m.begin(),m.end(),data), m.upper_bound(m.begin(),m.end(),data) (O(log N))
Sort: NO NEED :D
Size: m.size() (O(1))
Pointers: m.begin(),m.end()
Iterator: i++,i-- (all O(log N)) and (*i) (O(1))
Loop: for(i=m.begin();i!=m.end();i++) (O(N log N))
//NOTE IT DOES NOT ALLOW REPEATED ELEMENTS!!!
//IF REPEATED ELEMENTS NEEDED REPLACE ALL "map" WITH "multimap"

10) Priority Queue
#include <queue>
using namespace std;
priority_queue <data_type> pq;
OR
priority_queue <data_type,data_storage,comparison> pq;
Example: priority_queue <int,vector<int>,greater<int> > pq;//top is smallest
Example: priority_queue <ii,vector<ii>,greater<ii> > pq;
priority_queue <data_type> pq;
OR
priority_queue <data_type,data_storage,comparison>::iterator i;
Insert: pq.push(data) (O(log N))
Remove: pq.pop() (O(log N)) //default largest
Access: pq.top() (O(1)) //default largest
Size: pq.size() (O(1))

11) FENWICK
int fw[1000005];//doesn't really mean anything
void update(int p, int v){//update data at position p by value v
	for(int b=p;b<=N;b+=(b&(-b))) fw[b]+=v;
}
int range_sum_from_start(int p){//sum of numbers from 1 to p
	int sum=0;
	for(int b=p;b>0;b-=(b&(-b))) sum+=fw[b];
	return sum;
}
int range_sum(int p, int q){//sum of numbers from p to q
	if(p==0) return range_sum_from_start(q);
	return range_sum_from_start(q)-range_sum_from_start(p-1);
}
int find_number(int p){
	if(p==1) return range_sum_from_start(1);
	return range_sum_from start(p)-range_sum_from_start(p-1);
}

12) Binary Search
Standard code:
while(s<e){ //assumes answer is valid for all values <= correct answer
	int m=(s+e)/2;
	//if m is valid
	e=m;
	//if m is not valid
	s=m+1;
}

